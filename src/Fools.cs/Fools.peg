@namespace Fools.cs
@classname FoolsPegParser
@using System.Linq
@using Fools.cs.AST

program <object>
	= #STATE{ state["Indentation"] = 0; } s:statements eof { s }

statements <IList<object>>
	= pass_block / line+

pass_block <IList<object>>
	= INDENTATION "pass" eol { new List<object>() }

line <object>
	= (<object> !eof l:(<object> s:empty_line { s } / INDENTATION s:statement { s } ) { l } )

empty_line<object>
	= [ \t]* eol_not_eof { null }
	/ [ \t]+ eof { null }

statement <object>
	= s:simpleStatement eol { s }
	/ "if" __ n:name ":" __ eol INDENT s:statements UNINDENT
		{ new ConditionalStatement() { condition = n, body_when_true = s } }
	/ "def" __ n:name ":" __ eol INDENT s:statements UNINDENT
		{ new FunctionDefinition() { name = n, body = s } }
	/ s:((!eol .)* &eol) { Report.unrecognized_statement(state, s) }

simpleStatement <object>
	= a:name "=" __ b:name { new AssignmentStatement() { l_value = a, expression = b } }

name
	= n:([a-zA-Z] [a-zA-Z0-9_]*) __ { n }

__ = [ ]*

eol = (eol_not_eof / eof)

eol_not_eof = ("\r\n" / "\n\r" / "\r" / "\n")

comment = "//" [^\r\n]*

eof = !.

INDENTATION
	= indents:"\t"* (
		code:(" " [^\r\n]*) { Report.indent_with_spaces_error(state, indents.Flatten() + code) }
		/ &{ indents.Count == state["Indentation"] }
		/ (&{ indents.Count > state["Indentation"] } code:[^\r\n]* { Report.indentation_error(state, state["Indentation"], indents.Count, indents.Flatten() + code.Flatten()) }))

INDENT
	= #STATE{ state["Indentation"] += 1; }

UNINDENT
	= #STATE{ state["Indentation"] -= 1; }
