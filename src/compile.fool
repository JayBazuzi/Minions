
one fool begins interacting.with.the.user at mission_control
several fools begin finding.files.to.compile at mission_control

mission interacting.with.the.user is:
	when app.init:
		my.projects_to_build = message.project_file_names
		for each project_file in message.project_file_names:
			broadcast project_file.found(project=project_file, rebuild.all=message.rebuild_all)

	whenever compilation.finished:
		my.projects_to_build.remove(message.project)
		broadcast write.normal(strings.compilation_complete.format(file.path=message.project))
		if my.projects_to_build.is.empty():
			tell mission_control app.quit(0)

mission finding.files.to.compile is:
	requires:
		new building named code_factory with:
			compiler = fools.add.compiler_passes(Fools.Compiler())
			Eventual(NameTable) names
		send.mail.access to code_factory
		several fools begin compiling.a.file at code_factory

	prepare my.lab:
		_program = Fools.Program()
		_fragments = []

	started by project_file.found:
		project = message.file.path
		read.file(project) |<1> project_file.parse{contents=message.contents} | code_factory:
			on file.not.found at <1>:
				tell user error(strings.missing_project_file, project)
				broadcast compilation.finished(project, False)

	whenever fools.local.compilation.complete at code_factory:
		my.lab._program.add_names_from(message.fragment)
		my.lab._fragments.add(message.fragment)

mission compiling.a.file is:
	started by new.fools.file:
		broadcast mission.location.compiler.compile_local(message.code)

	when

def project_file.parse(string contents, mail_room factory):
	ssdf

new message compilation.finished:
	project as File.Path

new message project_file.found:
	project as File.Path
	rebuild.all as Bool

new message new.fools.file:
	code as File.Contents

new message fools.local.compilation.complete:
	program as Fools.Program.Fragment

copy type String to File.Path
copy type String to File.Contents

// I would like to be able to state the overall process. All of these are ways that Minions
// might do this work. But it probably doesn't make sense to define these for Fools.
// If it does, then we'll define these using non-core Fools. And only one of them.
/*
	read.file(project) |
		generate.files.to.compile{} |<  // pipe each to its own Fool
		compile.fools{} |> // Pipe back to the main Fool
		record.names{} |< // record.names is sent once per. After all have been sent, then continue with result
		finish.compiling{fragment, names} |> // Executed back on the file-specific Fool
		generate.assembly{} // Executed back on the single main Fool

This is a sequence of map/reduce operations, with some parallel carry-over between the map steps.

		coordinated work process:
			with:
				1 Coordinator (C) | N Workers (W)
				failed worker kills process
				start with 1 C | 0 W
			read.file(project) -> C | -
			generate.files.to.compile -> spawn W per message | -
			- | compile.fools -> C
			record.names | -
			====
			export.names.to.building() | -
			- | finish.compiling() -> C // gets name table from building
			merge.program.fragments | -
			====
			global.compile.and.generate.assembly() | -

			// ==== indicates a barrier. Process only continues when all have reported in.

		factory:
			with:
				1-1 coordinator (C), 0-N Workers (W)
				failed W destroys factory
				failed C destroys factory
			start on C:
				read.file(project) | generate.files.to.compile{} | spawn.fool W per message
			compile.fool on W:
				compile.fools(message.code) |-> C
			names.computed on C:
				record.names(message.names)
			after last compile.complete on C:
				export.names()
				tell names.defined to each W
			names.defined on W:
				finish.compiling() |-> C
			local.compile.complete on C:
				merge.program.fragment(message.fragment)
			after last local.compile.complete on C:
				global.compile()
				generate.binary()

		mission compile.the.project uses map/reduce as follows:
			generate:
				read.file(project) | generate.files.to.compile{}
			map and retain fools as local.compilers:
				compile.fools(code)
			reduce:
				record.names(names)
			compute:
				export.names.to.building()
			map across local.compilers:
				finish.compiling()
			reduce:
				merge.program.fragments(fragment)
			compute:
				global.compile()
				generate.binary()

		mission compile.the.project uses map/reduce as follows:
			requires:
				new building named code_factory with:
					compiler = fools.add.compiler_passes(Fools.Compiler())
					names = eventual name.table
			generate:
				read.file(project) | generate.files.to.compile
			map and retain fools as local.compilers:
				compile.fools(code)
			with results:
				reduce(record.names{names}) | compute.final.names | store.to{code_factory.names}
			map across local.compilers:
				finish.compiling(code_factory)
			with results:
				reduce(merge.program.fragments{fragment}) | global.compile | generate.binary

*/
